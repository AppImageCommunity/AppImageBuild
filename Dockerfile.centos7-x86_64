FROM centos:7

ENV ARCH=x86_64 DIST=centos7

# inherited by build scripts
ARG VERBOSE=0

RUN yum install -y centos-release-scl && \
    yum install -y devtoolset-10 \
        wget make gnupg zip git subversion glib2-devel automake libtool patch zlib-devel cairo-devel openssl-devel curl-devel \
        fuse-devel vim-common zlib-devel desktop-file-utils fuse fuse-libs gtest-devel \
        libXft-devel librsvg2-devel curl libffi-devel gettext-devel file python2 bzip2 \
        texinfo bison gnutls-devel sqlite3-devel readline-devel boost-devel

COPY /entrypoint-centos.sh /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
SHELL ["/entrypoint.sh", "bash", "-c"]

RUN yum update -y ca-certificates
RUN wget https://artifacts.assassinate-you.net/prebuilt-cmake/cmake-v3.19.1-centos7-x86_64.tar.gz -O- | tar xz --strip-components=1 -C/usr/local

# pcre >= 8.40 required by glib 2.56
# however, we can just use the latest version, which is 8.44 as of Dec 2020
ARG PCRE_VERSION=8.40
COPY build-pcre.sh /
RUN bash -x /build-pcre.sh

# set up PKG_CONFIG_PATH to ensure that deps in /deps have precedence
# also, pcre is a dep of glib
ENV PKG_CONFIG_PATH=/deps/lib/pkgconfig:/deps/share/pkgconfig

ARG GLIB_VERSION=2.56.0
COPY build-glib.sh /
RUN bash -x /build-glib.sh

ARG GIT_VERSION=2.29.2
COPY build-git.sh /
RUN bash -x /build-git.sh

ARG ZSYNC_VERSION=0.6.2
COPY build-zsync.sh /
RUN bash -x /build-zsync.sh

ARG DESKTOP_FILE_UTILS_VERSION=56d220dd679c7c3a8f995a41a27a7d6f3df49dea
COPY build-desktop-file-utils.sh /
RUN bash -x /build-desktop-file-utils.sh

ARG AUTOMAKE_VERSION=1.16.5
COPY build-automake.sh /
RUN bash -x /build-automake.sh

ARG LIBGPG_ERROR_VERSION=1.45
COPY build-libgpg-error.sh /
RUN bash -x /build-libgpg-error.sh

ARG LIBASSUAN_VERSION=2.5.5
COPY build-libassuan.sh /
RUN bash -x /build-libassuan.sh

ARG LIBGCRYPT_VERSION=1.10.1
COPY build-libgcrypt.sh /
RUN bash -x /build-libgcrypt.sh

ARG LIBKSBA_VERSION=1.6.0
COPY build-libksba.sh /
RUN bash -x /build-libksba.sh

ARG NPTH_VERSION=1.6
COPY build-npth.sh /
RUN bash -x /build-npth.sh

ARG GNUPG_VERSION=2.3.7
COPY build-gnupg.sh /
RUN bash -x /build-gnupg.sh

ARG GPGME_VERSION=1.17.1
COPY build-gpgme.sh /
RUN bash -x /build-gpgme.sh

# create unprivileged user for non-build-script use of this image
# build-in-docker.sh will likely not use this one, as it enforces the caller's uid inside the container
RUN useradd --system build
USER build
